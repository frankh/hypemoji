{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","_super","call","framesChange","e","value","parseInt","target","setState","frames","delayChange","delay","rainbowChange","checked","rainbow","regenerate","preventDefault","onDrop","state","images","previews","progress","bind","assertThisInitialized","document","onpaste","pasteEvent","items","clipboardData","i","length","type","indexOf","blob","getAsFile","ms","Promise","resolve","setTimeout","imageFiles","_this2","all","map","im","hypify","then","n","sleep","image","numFrames","console","log","concat","Jimp","arrayBuffer","read","jimg_tmp","resize","averageColor","getPixelColor","jimg","getWidth","getHeight","scaleToFit","intToRGBA","r","g","b","Math","max","min","color","apply","params","width","height","frame","GifFrame","delayCentisecs","push","hue_shift","bitmap","data","slice","getBase64Async","codec","GifCodec","GifUtil","quantizeDekker","encodeGif","loops","gif","btoa","String","fromCharCode","buffer","react_default","a","createElement","onPaste","name","placeholder","onChange","onClick","es","multiple","_ref","getRootProps","getInputProps","assign","className","rc_progress_es","percent","dataUri","key","href","download","alt","src","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1e0abaa3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Dropzone from 'react-dropzone';\nimport Jimp from 'jimp';\nimport { Line } from 'rc-progress';\nimport { GifFrame, GifUtil, GifCodec } from 'gifwrap';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { images: [], previews: [], frames: 10, delay: 10, rainbow: false, progress: null };\n    this.onDrop = this.onDrop.bind(this);\n\n    document.onpaste = (pasteEvent) => {\n      var items = pasteEvent.clipboardData.items;\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].type.indexOf(\"image\") === 0) {\n          var blob = items[i].getAsFile();\n          this.onDrop([blob]);\n        }\n      }\n    };\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  onDrop(imageFiles) {\n    this.setState({\n      images: imageFiles,\n    });\n\n    setTimeout(() => {\n      Promise.all(imageFiles.map((im) => (\n        this.hypify(im, this.state.frames, this.state.delay)\n      ))).then((previews) => {\n        this.setState({previews: previews});\n        this.setState({\n          progress: null\n        });\n      });\n    })\n  }\n\n  async progress(n) {\n    this.setState({\n      progress: n\n    });\n    await this.sleep(1);\n  }\n\n  async hypify(image, numFrames, delay) {\n    console.log(`Hypifying with ${numFrames} frames and ${delay} delay`);\n    const frames = [];\n\n    await this.progress(0);\n    let jimg_tmp = await Jimp.read(await image.arrayBuffer());\n    jimg_tmp.resize(1, 1);\n    let averageColor = jimg_tmp.getPixelColor(0, 0);\n\n    await this.progress(0.05);\n    let jimg = await Jimp.read(await image.arrayBuffer());\n    if( jimg.getWidth() >= 128 || jimg.getHeight() >= 128 ) {\n      jimg.scaleToFit(128, 128);\n    }\n    let {r, g, b} = Jimp.intToRGBA(averageColor);\n    if( Math.max(r, g, b) - Math.min(r, g, b) < 30 ) {\n      console.log(\"not vibrant enough, adding red\")\n      // Not enough color contrast, have to tint first\n      jimg.color([\n        { apply: 'red', params: [100] }\n      ])\n    }\n    await this.progress(0.07);\n\n    const width = jimg.getWidth(), height = jimg.getHeight();\n    for(var i = 0; i < numFrames; i++) {\n      let frame = new GifFrame(width, height, { delayCentisecs: delay });\n      frames.push(frame);\n\n      // Initially there was actually a bug in the hue_shift\n      // The shift is persistent between frames, so shifting 360/numFrames\n      // each time cycles evenly through all colours\n\n      // However, multiplying this shift by i each time causes the colours\n      // to be a lot more erratic, and i liked the effect, so we're keeping it as the default.\n      let hue_shift = (360 / numFrames);\n      if( !this.state.rainbow ) {\n        hue_shift *= i;\n      }\n      jimg.color([\n        { apply: 'hue', params: [hue_shift] },\n      ])\n\n      frame.bitmap.data = jimg.bitmap.data.slice();\n      // Have to resolve this here for some reason or all frames are the same\n      await jimg.getBase64Async('image/png');\n      await this.progress((i + 1) / numFrames);\n    }\n\n    const codec = new GifCodec();\n    GifUtil.quantizeDekker(frames);\n    let gif = await codec.encodeGif(frames, {loops: 0})\n\n    this.setState({\n      progress: null\n    });\n\n    return 'data:image/gif;base64,' + btoa(String.fromCharCode.apply(null, gif.buffer));\n  }\n\n  framesChange = (e) => {\n    let value = parseInt(e.target.value);\n    if( value <= 0 || !value ) {\n      value = 10;\n    }\n\n    this.setState({frames: value});\n  }\n\n  delayChange = (e) => {\n    let value = parseInt(e.target.value);\n    if( value <= 0 ) {\n      value = 1;\n    }\n\n    this.setState({delay: value});\n  }\n\n  rainbowChange = (e) => {\n    let value = e.target.checked;\n    this.setState({rainbow: value});\n  }\n\n  regenerate = (e) => {\n    e.preventDefault();\n    this.onDrop(this.state.images);\n    return false;\n  }\n\n  render() {\n    return (\n      <div onPaste={this.onPaste}>\n        {this.state.previews.length > 0 ? (\n          <form>\n            <label>\n              Number of Frames:\n              <input type=\"number\" name=\"frames\" placeholder=\"10\" onChange={this.framesChange} />\n            </label>\n            <label>\n              Frame delay (in centiseconds):\n              <input type=\"number\" name=\"delay\" placeholder=\"10\" onChange={this.delayChange} />\n            </label>\n            <label>\n              Rainbow:\n              <input type=\"checkbox\" name=\"rainbow\" onChange={this.rainbowChange} />\n            </label>\n\n            <button type=\"submit\" name=\"submit\" onClick={this.regenerate}>Regenerate</button>\n          </form>\n        ) : null}\n        <Dropzone onDrop={this.onDrop} multiple={false}>\n          {({getRootProps, getInputProps}) => (\n            <div className=\"dropzone\" {...getRootProps()}>\n              <p>Drag image here, paste from clipboard, or click to select</p>\n              <input {...getInputProps()} />\n            </div>\n          )}\n        </Dropzone>\n        {this.state.progress != null ? (\n          <Line percent={this.state.progress * 100} />\n        ): null}\n        {this.state.previews.map((dataUri, i) => (\n          <a key={`image-${i}`} href={dataUri} download>\n            <img alt=\"hype emoji\" src={dataUri}/>\n          </a>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}