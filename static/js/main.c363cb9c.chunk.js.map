{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","framesChange","e","value","parseInt","target","setState","frames","delayChange","delay","rainbowChange","checked","rainbow","regenerate","preventDefault","onDrop","state","images","previews","progresses","bind","_assertThisInitialized","document","onpaste","pasteEvent","items","clipboardData","i","length","type","indexOf","blob","getAsFile","_createClass","key","ms","Promise","resolve","setTimeout","imageFiles","_this2","this","map","all","im","hypify","then","_progress","_asyncToGenerator","_regeneratorRuntime","mark","_callee","n","wrap","_context","prev","next","sleep","stop","_x","_x2","apply","arguments","_hypify","_callee2","index","image","numFrames","_codec","inputImg","jimg_tmp","averageColor","jimg","_Jimp$intToRGBA","r","g","b","width","height","frame","hue_shift","codec","gif","_context2","GifCodec","t0","t1","Uint8Array","arrayBuffer","t2","sent","t3","decodeGif","console","log","concat","progress","t4","Jimp","t5","read","resize","getPixelColor","t6","t7","getWidth","getHeight","scaleToFit","intToRGBA","Math","max","min","color","params","undefined","GifFrame","delayCentisecs","push","_objectSpread","bitmap","data","slice","getBase64Async","GifUtil","quantizeDekker","encodeGif","loops","abrupt","Buffer","from","buffer","toString","_x3","_x4","_x5","_x6","_this3","_jsxs","children","_jsx","className","onPaste","name","placeholder","onChange","onClick","Dropzone","multiple","_ref","getRootProps","getInputProps","p","Line","percent","dataUri","href","download","split","join","alt","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c363cb9c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Dropzone from 'react-dropzone';\nimport Jimp from 'jimp';\nimport { Line } from 'rc-progress';\nimport { GifFrame, GifUtil, GifCodec } from 'gifwrap';\nimport { Buffer } from 'buffer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { images: [], previews: [], frames: 10, delay: 10, rainbow: false, progresses: [] };\n    this.onDrop = this.onDrop.bind(this);\n\n    document.onpaste = (pasteEvent) => {\n      var items = pasteEvent.clipboardData.items;\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].type.indexOf(\"image\") === 0) {\n          var blob = items[i].getAsFile();\n          this.onDrop([blob]);\n        }\n      }\n    };\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  onDrop(imageFiles) {\n    this.setState({\n      images: imageFiles,\n      progresses: imageFiles.map(() => 0),\n    });\n\n    setTimeout(() => {\n      Promise.all(imageFiles.map((im, i) => (\n        this.hypify(i, im, this.state.frames, this.state.delay)\n      ))).then((previews) => {\n        this.setState({previews: previews});\n        this.setState({\n          progresses: []\n        });\n      });\n    })\n  }\n\n  async progress(i, n) {\n    let progresses = this.state.progresses;\n    progresses[i] = n;\n    this.setState({\n      progresses: progresses\n    });\n    await this.sleep(1);\n  }\n\n  async hypify(index, image, numFrames, delay) {\n    let frames = [];\n    if (image.type === \"image/gif\") {\n      const codec = new GifCodec();\n      let inputImg = await codec.decodeGif(new Uint8Array(await image.arrayBuffer()))\n      numFrames = inputImg.frames.length\n      frames = inputImg.frames\n    }\n    console.log(`Hypifying with ${numFrames} frames and ${delay} delay`);\n    await this.progress(index, 0);\n    let jimg_tmp = await Jimp.read(await image.arrayBuffer());\n    jimg_tmp.resize(1, 1);\n    let averageColor = jimg_tmp.getPixelColor(0, 0);\n\n    await this.progress(index, 0.05);\n    let jimg = await Jimp.read(await image.arrayBuffer());\n    if( jimg.getWidth() >= 128 || jimg.getHeight() >= 128 ) {\n      jimg.scaleToFit(128, 128);\n    }\n    let {r, g, b} = Jimp.intToRGBA(averageColor);\n    if( Math.max(r, g, b) - Math.min(r, g, b) < 30 ) {\n      console.log(\"not vibrant enough, adding red\")\n      // Not enough color contrast, have to tint first\n      jimg.color([\n        { apply: 'red', params: [100] }\n      ])\n    }\n    await this.progress(index, 0.07);\n\n    const width = jimg.getWidth(), height = jimg.getHeight();\n    for(var i = 0; i < numFrames; i++) {\n      let frame;\n      let hue_shift = (360 / numFrames);\n\n      if (frames[i] === undefined) {\n        frame = new GifFrame(width, height, { delayCentisecs: delay });\n        frames.push(frame);\n      } else {\n        // We have an existing frame here\n        frame = frames[i]\n        jimg = new Jimp({...frame.bitmap});\n        hue_shift = (hue_shift * i) % 360;\n      }\n\n      // Initially there was actually a bug in the hue_shift\n      // The shift is persistent between frames, so shifting 360/numFrames\n      // each time cycles evenly through all colours\n\n      // However, multiplying this shift by i each time causes the colours\n      // to be a lot more erratic, and i liked the effect, so we're keeping it as the default.\n      if( !this.state.rainbow ) {\n        hue_shift = (hue_shift * i) % 360;\n      }\n\n      jimg.color([\n        { apply: 'hue', params: [hue_shift] },\n      ])\n\n      frame.bitmap.data = jimg.bitmap.data.slice();\n      // Have to resolve this here for some reason or all frames are the same\n      await jimg.getBase64Async('image/png');\n      await this.progress(index, (i + 1) / numFrames);\n    }\n\n    debugger\n    const codec = new GifCodec();\n    GifUtil.quantizeDekker(frames);\n    let gif = await codec.encodeGif(frames, {loops: 0})\n\n    await this.progress(index, 1);\n\n    return 'data:image/gif;base64,' + Buffer.from(gif.buffer).toString(\"base64\")\n  }\n\n  framesChange = (e) => {\n    let value = parseInt(e.target.value);\n    if( value <= 0 || !value ) {\n      value = 10;\n    }\n\n    this.setState({frames: value});\n  }\n\n  delayChange = (e) => {\n    let value = parseInt(e.target.value);\n    if( value <= 0 ) {\n      value = 1;\n    }\n\n    this.setState({delay: value});\n  }\n\n  rainbowChange = (e) => {\n    let value = e.target.checked;\n    this.setState({rainbow: value});\n  }\n\n  regenerate = (e) => {\n    e.preventDefault();\n    this.onDrop(this.state.images);\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"header\">\n          <h1>Hypemoji</h1>\n        </div>\n        <div onPaste={this.onPaste}>\n          {this.state.previews.length > 0 ? (\n            <form>\n              <label>\n                Number of Frames:\n                <input type=\"number\" name=\"frames\" min=\"2\" max=\"100\" placeholder=\"10\" onChange={this.framesChange} />\n              </label>\n              <label>\n                Frame delay (in centiseconds):\n                <input type=\"number\" name=\"delay\" min=\"2\" placeholder=\"10\" onChange={this.delayChange} />\n              </label>\n              <label>\n                Rainbow:\n                <input type=\"checkbox\" name=\"rainbow\" onChange={this.rainbowChange} />\n              </label>\n\n              <button type=\"submit\" name=\"submit\" onClick={this.regenerate}>Regenerate</button>\n            </form>\n          ) : null}\n          <Dropzone onDrop={this.onDrop} multiple={true}>\n            {({getRootProps, getInputProps}) => (\n              <div className=\"dropzone\" {...getRootProps()}>\n                <p>Drag image here, paste from clipboard, or click to select</p>\n                <input {...getInputProps()} />\n              </div>\n            )}\n          </Dropzone>\n          <div className=\"result\">\n          {(this.state.progresses || []).map((p, i) => (\n            <Line key={`line_${i}`} percent={p * 100} />\n          ))}\n          {this.state.previews.map((dataUri, i) => (\n            <a key={`image-${i}`} href={dataUri} download={`${this.state.images[i].name.split('.').slice(0, -1).join('.')}`}>\n              <img alt=\"hype emoji\" src={dataUri}/>\n            </a>\n          ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}