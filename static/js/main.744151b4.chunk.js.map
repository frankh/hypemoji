{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","require","GifFrame","GifCodec","GifUtil","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","framesChange","e","value","parseInt","target","setState","frames","delayChange","delay","state","images","previews","onDrop","bind","assertThisInitialized","imageFiles","pictureDataURLs","_this2","Promise","all","map","im","hypify","then","image","numFrames","console","log","concat","Jimp","arrayBuffer","read","jimg_tmp","scaleToFit","averageColor","getPixelColor","jimg","intToRGBA","r","g","b","Math","max","min","color","apply","params","width","getWidth","height","getHeight","posterize","i","frame","delayCentisecs","push","bitmap","data","slice","getBase64Async","codec","encodeGif","loops","gif","btoa","String","fromCharCode","buffer","react_default","a","createElement","type","name","placeholder","onChange","compiled_default","withIcon","buttonText","imgExtension","maxFileSize","dataUri","key","src","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.744151b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp';\nconst { GifFrame, GifUtil, GifCodec } = require('gifwrap');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { images: [], previews: [], frames: 10, delay: 10 };\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  onDrop(imageFiles, pictureDataURLs) {\n    this.setState({\n      images: imageFiles,\n    });\n\n    Promise.all(imageFiles.map((im) => (\n      this.hypify(im, this.state.frames, this.state.delay)\n    ))).then((previews) => {\n      this.setState({previews: previews});\n    });\n  }\n\n  async hypify(image, numFrames, delay) {\n    console.log(`Hypifying with ${numFrames} frames and ${delay} delay`);\n    const frames = [];\n\n    let jimg_tmp = await Jimp.read(await image.arrayBuffer());\n    jimg_tmp.scaleToFit(1, 1);\n\n    let averageColor = jimg_tmp.getPixelColor(0, 0);\n\n    let jimg = await Jimp.read(await image.arrayBuffer());\n\n    let {r, g, b} = Jimp.intToRGBA(averageColor);\n    if( Math.max(r, g, b) - Math.min(r, g, b) < 30 ) {\n      console.log(\"not vibrant enough, adding red\")\n      // Not enough color contrast, have to tint first\n      jimg.color([\n        { apply: 'red', params: [100] }\n      ])\n    }\n\n    const width = jimg.getWidth(), height = jimg.getHeight();\n    // reduce color depth to 16 bit\n    jimg.posterize(16);\n    for(var i = 0; i < numFrames; i++) {\n      let frame = new GifFrame(width, height, { delayCentisecs: delay });\n      frames.push(frame);\n\n      jimg.color([\n        { apply: 'hue', params: [(360 / numFrames) * i] },\n      ])\n\n      frame.bitmap.data = jimg.bitmap.data.slice();\n      // Have to resolve this here for some reason or all frames are the same\n      await jimg.getBase64Async('image/png');\n      console.log(`done frame ${i}/${numFrames}`);\n    }\n\n    const codec = new GifCodec();\n    let gif = await codec.encodeGif(frames, {loops: 0})\n    return 'data:image/gif;base64,' + btoa(String.fromCharCode.apply(null, gif.buffer));\n  }\n\n  framesChange = (e) => {\n    let value = parseInt(e.target.value);\n    if( value <= 0 ) {\n      value = 1;\n    }\n\n    this.setState({frames: value});\n  }\n\n  delayChange = (e) => {\n    let value = parseInt(e.target.value);\n    if( value <= 0 ) {\n      value = 1;\n    }\n\n    this.setState({delay: value});\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          <label>\n            Number of Frames:\n            <input type=\"number\" name=\"frames\" placeholder=\"10\" onChange={this.framesChange} />\n          </label>\n          <label>\n            Frame delay (in centiseconds):\n            <input type=\"number\" name=\"delay\" placeholder=\"10\" onChange={this.delayChange} />\n          </label>\n        </form>\n        <ImageUploader\n          withIcon={true}\n          buttonText='Choose images'\n          onChange={this.onDrop}\n          imgExtension={['.jpg', '.gif', '.png', '.gif']}\n          maxFileSize={5242880}\n        />\n        {this.state.previews.map((dataUri, i) => (\n          <img key={`image-${i}`} width=\"128\" height=\"128\" src={dataUri}/>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}